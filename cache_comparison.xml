<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/** Global constants
 *
 * COPYRIGHT (C) 2018 Z0996690
 */

// Bus specification
// These are used in parameter declarations so need to be global.
const int ADDR_WIDTH = 4;
const int MAX_LINE_WIDTH = 1;

const bool READ = true;
const bool WRITE = false;

// Look up table for the function ceil(log2(x)) : int x in (0, 16]
// This is used to compute the number of bits to encode a
// number of lines
const int CEIL_LOG2[17] = {
     0, // Should be -inf
        0, 1, 2,
     2, 3, 3, 3,
     3, 4, 4, 4,
     4, 4, 4, 4,
     4
};</declaration>
	<template>
		<name x="5" y="5">Core</name>
		<parameter>bool &amp;addr[ADDR_WIDTH], bool &amp;type, chan &amp;request, urgent chan &amp;response</parameter>
		<declaration>/** Core process template
 *
 * DESCRIPTION
 *  This template is used to create processes which
 *  non-deterministically make a sequence of access
 *  requests and time their responses.
 *
 *  The process can wait in the IDLE state for an
 *  indefinite time before non-deterministically
 *  selecting the address to access and the access
 *  type, which can be read or write.
 *
 * ARGUMENTS
 *      addr : Reference to a shared array of bits
 *             which is the address bus. This avoids
 *             the address bus being in the global
 *             scope.
 *      type : Reference to a shared flag which is
 *             the type of access request. This can
 *             be READ (true|1) or WRITE (false|0).
 *   request : Reference to shared channel which the
 *             core uses to issue requests after
 *             selecting the address and access type.
 *             Channel parameter allows templates to
 *             be reused.
 *  response : Reference to shared channel which the
 *             core listens to before considering the
 *             request fulfilled. This channel is
 *             qualified as urgent, to prevent the
 *             process blocking after another process
 *             signals a response. Channel parameter
 *             allows templates to be reused.
 *
 * COPYRIGHT (C) 2018 Z0996690
 */

// Local clock used to time responses
clock t;</declaration>
		<location id="id0" x="-1037" y="-569">
			<name x="-1021" y="-578">END</name>
			<committed/>
		</location>
		<location id="id1" x="-1037" y="-705">
			<name x="-1021" y="-713">START</name>
			<committed/>
		</location>
		<location id="id2" x="-1037" y="-637">
			<name x="-1020" y="-646">WAITING</name>
		</location>
		<location id="id3" x="-1037" y="-833">
			<name x="-1020" y="-842">IDLE</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="select" x="-1028" y="-816">rand_addr0 : int[0,1],
rand_addr1 : int[0,1],
rand_addr2 : int[0,1],
rand_addr3 : int[0,1],
rand_type : int[0,1]</label>
			<label kind="assignment" x="-867" y="-816">addr[0] = rand_addr0,
addr[1] = rand_addr1,
addr[2] = rand_addr2,
addr[3] = rand_addr3,
type = rand_type</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<nail x="-1105" y="-569"/>
			<nail x="-1105" y="-833"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1028" y="-688">request!</label>
			<label kind="assignment" x="-1028" y="-671">t = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1028" y="-620">response?</label>
		</transition>
	</template>
	<template>
		<name>Memory</name>
		<parameter>urgent chan &amp;request, chan &amp;response</parameter>
		<declaration>/** Memory process template
 *
 * DESCRIPTION
 *  This template is used to simulate the delay
 *  associated with main memory accesses and the
 *  variability which can occur in them.
 *
 *  The process can wait in the IDLE state for an
 *  indefinite time until a request is received.
 *  The invariant and guard ensures 25 to 30 ns of
 *  time passes before the response is sent.
 *
 * ARGUMENTS
 *   request : Reference to shared channel which the
 *             memory listens to before timed 'ACCESSING'.
 *             This channel is qualified as urgent, to
 *             prevent the process blocking after another
 *             process signals a request for access.
 *             Channel parameter allows templates to be
 *             reused.
 *  response : Reference to shared channel which the
 *             memory uses to indicate the end of the
 *             timed access. Channel parameter allows
 *             templates to be reused.
 *
 * COPYRIGHT (C) 2018 Z0996690
 */

// Local clock used to enforce access time.
clock t;

// Timing bounds used in guard and invariant.
const int TMIN = 25; // ns
const int TMAX = 30; // ns</declaration>
		<location id="id4" x="-289" y="-374">
			<name x="-273" y="-390">ACCESSING</name>
			<label kind="invariant" x="-273" y="-374">t &lt;= TMAX</label>
		</location>
		<location id="id5" x="-289" y="-450">
			<name x="-273" y="-458">IDLE</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-280" y="-433">request?</label>
			<label kind="assignment" x="-280" y="-418">t = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-468" y="-416">t &gt;= TMIN</label>
			<label kind="synchronisation" x="-468" y="-432">response!</label>
			<nail x="-477" y="-373"/>
			<nail x="-477" y="-449"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>bool &amp;type, urgent chan &amp;req, chan &amp;done, chan &amp;mem_req, urgent chan &amp;mem_done, broadcast chan &amp;status, urgent chan &amp;hit, urgent chan &amp;miss, urgent chan &amp;invalid, chan &amp;read, chan &amp;write, chan &amp;rewrite, chan &amp;overwrite, urgent chan &amp;line_done, broadcast chan &amp;cache_hit, broadcast chan &amp;cache_miss</parameter>
		<declaration>/** Controller process template
 *
 * DESCRIPTION
 *  This template is used coordinate cache lines and
 *  ensure only one cache line is written with a tag.
 *
 *  The template has no knowledge of the associativity
 *  or number of cache lines. That depends on the
 *  properties of the processes with which the
 *  controller process shares channels with.
 * 
 *  The process queries the status of all cache lines
 *  listening using a status broadcast to determine if
 *  any cache lines have hit or are invalid. Silent
 *  channels are either IDLE (NOTSELECTED) or MISS.
 *  
 *  Four main cases:
 *    READ hit : Send read request to the only hit line.
 *   READ miss : Send request to main memory then 
 *               execute write miss procedure.
 *   WRITE hit : Send rewrite request to the only hit
 *               line.
 *  WRITE miss : If any lines are invalid,
 *               non-deterministically send write request
 *               to one of the invalid lines.
 *               Otherwise non-deterministically send
 *               overwrite request to one of the invalid
 *               miss lines.
 *
 * ARGUMENTS
 *       type : Reference to shared variable which
 *              indicates if an access request is a
 *              READ (true|1) or a WRITE (false|0).
 *        req : Reference to shared channel which the
 *              the controller listens to for requests.
 *              This channel is qualified as urgent to
 *              prevent the controller from blocking after
 *              request has been issued by the other process.
 *       done : Reference to shared channel which the
 *              controller uses to signal a request has been
 *              handled.
 *    mem_req : Reference to shared channel which the
 *              controller uses to access main memory in the
 *              case of a read miss or write. Channel
 *              parameter allows the system to be easily
 *              reconfigured and template reused.
 *   mem_done : Reference to shared channel which the
 *              controller listens to determine when a main
 *              memory access has been completed. This channel
 *              is qualified as urgent so the process cannot
 *              block once the main memory has sent a response.
 *     status : Reference to shared broadcast channel which
 *              the controller uses to get all cache lines to
 *              revaluate and signal their state: NOTSELECTED,
 *              INVALID, HIT or MISS; depending on the address
 *              bus and their valid state.
 *        hit : Reference to shared channel which the
 *              controller listens for after sending a status
 *              signal. This channel indicates a hit on one of
 *              the cache lines.
 *    invalid : Reference to shared channel which the
 *              controller listens for after sending a status
 *              signal. This channel indicates one or more of
 *              the cache lines are invalid.
 *       read : Reference to shared channel which the
 *              controller sends after receiving a hit on one
 *              cache line during a READ type request.
 *      write : Reference to shared channel which the
 *              controller sends after a receiving an invalid
 *              on one or more cache lines but no hit during a
 *              WRITE type request to non-deterministically
 *              write an invalid, selected cache line.
 *    rewrite : Reference to a shared channel which the
 *              controller sends after receiving a hit on one
 *              cache line to access that cache line.
 *  overwrite : Reference to a shared channel which the
 *              controller sends after receiving no hits or
 *              invalid signals to non-deterministically write
 *              any selected line.
 *  line_done : Reference to a shared channel which the
 *              controller listens to after issuing a line
 *              request (read|write|rewrite|overwrite). This
 *              channel signals the request has been handled.
 *              This channel is qualified as urgent to
 *              prevent the controller blocking after the line
 *              issues the request.
 *  cache_hit : Reference to a shared broadcast channel which
 *              the controller sends if any lines respond with
 *              hit. Write hits are counted.
 * cache_miss : Reference to a shared broadcast channel which
 *              the controller sends if no lines respond with
 *              miss. Write misses are counted.
 *
 * COPYRIGHT (C) 2018 Z0996690
 */
</declaration>
		<location id="id6" x="-1071" y="-782">
			<committed/>
		</location>
		<location id="id7" x="-1224" y="-782">
			<name x="-1207" y="-790">WRITE_MISS</name>
			<committed/>
		</location>
		<location id="id8" x="-1504" y="-842">
			<name x="-1487" y="-850">READ_MISS</name>
			<committed/>
		</location>
		<location id="id9" x="-1649" y="-901">
			<name x="-1632" y="-850">READ_HIT</name>
			<committed/>
		</location>
		<location id="id10" x="-1368" y="-604">
			<name x="-1377" y="-587">END</name>
			<committed/>
		</location>
		<location id="id11" x="-1368" y="-722">
			<committed/>
		</location>
		<location id="id12" x="-1223" y="-722">
			<name x="-1207" y="-731">CHECK_INVALID</name>
			<urgent/>
		</location>
		<location id="id13" x="-1071" y="-841">
			<committed/>
		</location>
		<location id="id14" x="-1224" y="-841">
			<name x="-1334" y="-849">CHECK_HITW</name>
			<urgent/>
		</location>
		<location id="id15" x="-1504" y="-781">
			<name x="-1513" y="-765">READING_MEM</name>
		</location>
		<location id="id16" x="-1649" y="-841">
			<committed/>
		</location>
		<location id="id17" x="-1368" y="-663">
			<name x="-1462" y="-655">ACCESSING</name>
		</location>
		<location id="id18" x="-1504" y="-900">
			<name x="-1487" y="-909">CHECK_HITR</name>
			<urgent/>
		</location>
		<location id="id19" x="-1224" y="-960">
			<name x="-1208" y="-969">WRITE_START</name>
			<committed/>
		</location>
		<location id="id20" x="-1504" y="-960">
			<name x="-1487" y="-969">READ_START</name>
			<committed/>
		</location>
		<location id="id21" x="-1368" y="-994">
			<name x="-1377" y="-977">START</name>
			<committed/>
		</location>
		<location id="id22" x="-1368" y="-1071">
			<name x="-1378" y="-1105">IDLE</name>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id13"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1063" y="-824">cache_hit!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-1215" y="-824">cache_miss!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1496" y="-884">cache_miss!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-1640" y="-884">cache_hit!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-1486" y="-798">mem_done?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-1215" y="-764">status!</label>
			<nail x="-1224" y="-765"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-1350" y="-621">done!</label>
			<nail x="-909" y="-603"/>
			<nail x="-909" y="-1071"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1360" y="-646">line_done?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1063" y="-731">rewrite!</label>
			<nail x="-1071" y="-663"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1215" y="-705">overwrite!</label>
			<nail x="-1224" y="-663"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1360" y="-705">write!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1342" y="-748">invalid?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-1207" y="-858">hit?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1215" y="-884">status!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-1496" y="-824">mem_req!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1641" y="-698">read!</label>
			<nail x="-1649" y="-663"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1623" y="-918">hit?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-1496" y="-943">status!</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="guard" x="-1351" y="-1020">type == WRITE</label>
			<nail x="-1223" y="-994"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-1487" y="-1020">type == READ</label>
			<nail x="-1504" y="-994"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1360" y="-1054">req?</label>
		</transition>
	</template>
	<template>
		<name>CacheLine</name>
		<parameter>const int[0,MAX_LINE_WIDTH] LINE_WIDTH, const bool line[MAX_LINE_WIDTH], bool &amp;addr[ADDR_WIDTH], chan &amp;mem_req, urgent chan &amp;mem_res, urgent chan &amp;status, broadcast chan &amp;hit, broadcast chan &amp;miss, broadcast chan &amp;invalid, urgent chan &amp;read, urgent chan &amp;write, urgent chan &amp;rewrite, urgent chan &amp;overwrite, chan &amp;done</parameter>
		<declaration>/** CacheLine process template
 *
 * DESCRIPTION
 *  This template is used to store the tags and valid
 *  bits for each cache line. The temporal logic is
 *  also carried out here for cache accesses.
 *
 *  The template does not communicate with the core
 *  but with the controller which knows the state of
 *  all other cache lines.
 * 
 *  The process listens to status queries, upon which
 *  the process location is updated to IDLE (NOTSELECTED),
 *  INVALID, MISS or HIT, sending the status on transition
 *  into the location over a broadcast channel. The conditions
 *  for these locations are as follows:

 *      HIT : LSBs of address bus match line[0:LINE_WIDTH-1];
 *            Valid bit is true;
 *            MSBs of address bus match tag[0:TAG_WIDTH-1].

 *     MISS : LSBs of address bus match line[0:LINE_WIDTH-1];
 *            Valid bit is true;
 *            MSBs of address bus do not match tag[0:TAG_WIDTH-1].

 *  INVALID : LSBs of address bus match line[0:LINE_WIDTH-1];
 *            Valid bit is false.

 *     IDLE : LSBs of address bus do not match line[0:LINE_WIDTH-1].
 *  
 *  The process location determined which requests
 *  the process will respond to. These are read, rewrite,
 *  overwrite, write. The *write requests will also write
 *  main memory in parallel, implementing the cache write
 *  through policy.
 *
 * ARGUMENTS
 * LINE_WIDTH : Constant which indicates how many bits of line
 *              to check in is_cache_line(). This circumvents
 *              the compile time restriction on parameter array
 *              length.
 *       line : Constant which is an array of bits of which
 *              elements [0,LINE_WIDTH-1] must match for the
 *              cache line to be selected.
 *       addr : Reference to a shared array of bits
 *              which is the address bus. This avoids
 *              the address bus being in the global
 *              scope.
 *    mem_req : Reference to shared channel which the
 *              cacheline uses to access main memory in the
 *              case of a write through to memory. Channel
 *              parameter allows the system to be easily
 *              reconfigured and template reused.
 *   mem_done : Reference to shared channel which the
 *              cacheline listens to determine when a main
 *              memory access has been completed. This channel
 *              is qualified as urgent so the process cannot
 *              block once the main memory has sent a response.
 *     status : Reference to shared channel which the line
 *              listens before revaluating and signaling its
 *              state. Urgency prevents process from blocking
 *              or ignoring request.
 *        hit : Reference to shared channel which the line
 *              uses to signal transition into HIT.
 *       miss : Reference to shared channel which the line
 *              uses to signal transition into MISS.
 *    invalid : Reference to shared channel which the line
 *              uses to signal transition into INVALID.
 *       read : Reference to shared channel which the line
 *              listens to in HIT. Urgency prevents
 *              process from blocking or ignoring request.
 *      write : Reference to shared channel which the line
 *              listens to in INVALID. Urgency prevents
 *              process from blocking or ignoring request.
 *    rewrite : Reference to shared channel which the line
 *              listens to in HIT. Urgency prevents
 *              process from blocking or ignoring request.
 *  overwrite : Reference to shared channel which the line
 *              listens to in MISS. Urgency prevents
 *              process from blocking or ignoring request.
 *       done : Reference to a shared channel which the
 *              line uses to signal the completion of a request
 *              request (read|write|rewrite|overwrite).
 *
 * COPYRIGHT (C) 2018 Z0996690
 */


// Cache timing constraints for read and write.
const int TMINR = 5; // ns
const int TMAXR = 10; // ns
const int TMINW = 25; // ns
const int TMAXW = 30; // ns

// Size of line and tag.
const int TAG_WIDTH = ADDR_WIDTH - LINE_WIDTH;
const int LINE_OFFSET = 0;
const int TAG_OFFSET = LINE_OFFSET + LINE_WIDTH;

// Line state
bool tag[TAG_WIDTH];
bool valid = false;

// Local clock for timed cache accesses.
clock t;

// Test for IDLE|*
bool is_cache_line()
{
    return forall (i : int[0,LINE_WIDTH-1]) addr[i+LINE_OFFSET] == line[i];
}

// Test for INVALID|*
bool is_cache_valid()
{
    return valid;
}

// Test for HIT|MISS
bool is_cache_hit()
{
    return forall (i : int[0,TAG_WIDTH-1]) addr[i+TAG_OFFSET] == tag[i];
}

// Updates cache line on *write requests.
void update_cache()
{
    for (i : int[0,TAG_WIDTH-1]) tag[i] = addr[i+TAG_OFFSET];
    valid = true;
}</declaration>
		<location id="id23" x="-705" y="-782">
			<name x="-722" y="-765">END</name>
			<committed/>
		</location>
		<location id="id24" x="-705" y="-858">
			<name x="-688" y="-867">WAITING</name>
		</location>
		<location id="id25" x="-705" y="-926">
			<name x="-688" y="-943">WRITING</name>
			<label kind="invariant" x="-688" y="-926">t &lt;= TMAXW</label>
		</location>
		<location id="id26" x="-527" y="-926">
			<name x="-510" y="-943">READING</name>
			<label kind="invariant" x="-510" y="-926">t &lt;= TMAXR</label>
		</location>
		<location id="id27" x="-705" y="-1003">
			<committed/>
		</location>
		<location id="id28" x="-1062" y="-1105">
			<name x="-1045" y="-1122">IDLE</name>
		</location>
		<location id="id29" x="-909" y="-1309">
			<name x="-951" y="-1293">CHECK_LINE</name>
			<committed/>
		</location>
		<location id="id30" x="-748" y="-1249">
			<name x="-799" y="-1231">CHECK_VALID</name>
			<committed/>
		</location>
		<location id="id31" x="-884" y="-1088">
			<name x="-867" y="-1106">INVALID</name>
		</location>
		<location id="id32" x="-620" y="-1190">
			<name x="-662" y="-1173">CHECK_HIT</name>
			<committed/>
		</location>
		<location id="id33" x="-527" y="-1054">
			<name x="-510" y="-1062">HIT</name>
		</location>
		<location id="id34" x="-705" y="-1071">
			<name x="-688" y="-1088">MISS</name>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-680" y="-1071">status?</label>
			<nail x="-1258" y="-1054"/>
			<nail x="-1258" y="-1394"/>
			<nail x="-909" y="-1394"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-858" y="-1088">status?</label>
			<nail x="-1249" y="-1071"/>
			<nail x="-1249" y="-1385"/>
			<nail x="-917" y="-1385"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-1037" y="-1105">status?</label>
			<nail x="-1241" y="-1088"/>
			<nail x="-1241" y="-1377"/>
			<nail x="-926" y="-1377"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-1215" y="-1122">status?</label>
			<nail x="-1232" y="-1105"/>
			<nail x="-1232" y="-1368"/>
			<nail x="-934" y="-1368"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-1045" y="-799">done!</label>
			<nail x="-1062" y="-782"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id23"/>
			<label kind="guard" x="-518" y="-902">t &gt;= TMINR</label>
			<nail x="-527" y="-782"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-697" y="-841">mem_res?</label>
			<label kind="assignment" x="-697" y="-824">update_cache()</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-696" y="-901">t &gt;= TMINW</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-696" y="-986">mem_req!</label>
			<label kind="assignment" x="-696" y="-969">t = 0</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-518" y="-986">read?</label>
			<label kind="assignment" x="-518" y="-969">t = 0</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-697" y="-1045">overwrite?</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-670" y="-1021">rewrite?</label>
			<nail x="-527" y="-1003"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-875" y="-1020">write?</label>
			<nail x="-884" y="-1003"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-1054" y="-1334">!is_cache_line()</label>
			<nail x="-1062" y="-1309"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-884" y="-1334">is_cache_line()</label>
			<nail x="-748" y="-1309"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="guard" x="-884" y="-1275">!is_cache_valid()</label>
			<label kind="synchronisation" x="-875" y="-1147">invalid!</label>
			<nail x="-884" y="-1249"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id32"/>
			<label kind="guard" x="-731" y="-1275">is_cache_valid()</label>
			<nail x="-620" y="-1249"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id34"/>
			<label kind="guard" x="-731" y="-1213">!is_cache_hit()</label>
			<label kind="synchronisation" x="-697" y="-1147">miss!</label>
			<nail x="-705" y="-1190"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="guard" x="-587" y="-1213">is_cache_hit()</label>
			<label kind="synchronisation" x="-519" y="-1147">hit!</label>
			<nail x="-527" y="-1190"/>
		</transition>
	</template>
	<template>
		<name>Counter</name>
		<parameter>const int MAX_REQUESTS, urgent chan &amp;hit, urgent chan &amp;miss</parameter>
		<declaration>/** Counter process template
 *
 * DESCRIPTION
 *  This template is used to count the number of
 *  hits and misses and compare hit rates.
 *  It is a test automaton.
 * 
 *  To avoid inflating the state space, the
 *  automaton will only count a finite number of
 *  requests.
 * 
 * ARGUMENTS
 *  MAX_REQUESTS : Constant maximum number of requests to
 *                 count. This should be as small as possible
 *                 to avoid inflating the state space.
 *           hit : Reference to shared channel indicating a
 *                 cache hit. Urgency ensures all hits are
 *                 counted.
 *          miss : Reference to shared channel indicating a
 *                 cache miss. Urgency ensure all misses are
 *                 counted.
 *                 
 *
 * COPYRIGHT (C) 2018 Z0996690
 */

// Bound variables.
int[0,MAX_REQUESTS] num_misses = 0;
int[0,MAX_REQUESTS] num_hits = 0;

// Total number of misses and hits.
int num_requests()
{
    return num_misses + num_hits;
}

// Method to evaulate whether a hit rate had been exceeded.
bool hit_rate_ge(const int test)
{
    return num_requests() &gt; 0
       and 100*num_hits &gt;= test*num_requests();
}</declaration>
		<location id="id35" x="-671" y="-178">
			<name x="-654" y="-187">END</name>
		</location>
		<location id="id36" x="-671" y="-246">
			<committed/>
		</location>
		<location id="id37" x="-671" y="-357">
			<name x="-663" y="-340">IDLE</name>
		</location>
		<init ref="id37"/>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-663" y="-221">num_requests() == MAX_REQUESTS</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="guard" x="-663" y="-280">num_requests() &lt; MAX_REQUESTS</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-884" y="-340">miss?</label>
			<label kind="assignment" x="-884" y="-323">num_misses++</label>
			<nail x="-739" y="-357"/>
			<nail x="-739" y="-246"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-595" y="-340">hit?</label>
			<label kind="assignment" x="-595" y="-323">num_hits++</label>
			<nail x="-603" y="-357"/>
			<nail x="-603" y="-246"/>
		</transition>
	</template>
	<template>
		<name>Coordinator</name>
		<parameter>const int NUM_CACHES, urgent chan &amp;core_request, chan &amp;core_response, chan &amp;cache_request, urgent chan &amp;cache_response</parameter>
		<declaration>/** Counter process template
 *
 * DESCRIPTION
 *  This template is used to send the same core request
 *  to multiple caches.
 * 
 * ARGUMENTS
 *     NUM_CACHES : Constant number of caches to
 *                  coordinate.
 *   core_request : Reference to shared channel which
 *                  the coordinator listens to for core
 *                  requests.
 *  core_response : Reference to shared channel which
 *                  the coordinator uses to signal to the
 *                  core all caches have responded.
 *  cache_request : Reference to shared channel which the
 *                  coordinator uses to send individual
 *                  requests to caches.
 * cache_response : Reference to shared channel which the
 *                  coordinator listens for caches to
 *                  indicate the completion of requests.
 *
 * COPYRIGHT (C) 2018 Z0996690
 */

// Semaphore like variable ensures all requests have
// responses.
int num_requests = 0;</declaration>
		<location id="id38" x="-612" y="-204">
			<name x="-680" y="-187">CHECK_RESPONSES</name>
			<committed/>
		</location>
		<location id="id39" x="-612" y="-280">
			<name x="-697" y="-288">WAITING</name>
		</location>
		<location id="id40" x="-612" y="-365">
			<name x="-722" y="-373">REQUESTING</name>
			<committed/>
		</location>
		<location id="id41" x="-612" y="-442">
			<name x="-595" y="-450">IDLE</name>
		</location>
		<init ref="id41"/>
		<transition>
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-603" y="-263">cache_response?</label>
			<label kind="assignment" x="-603" y="-246">num_requests--</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id41"/>
			<label kind="guard" x="-773" y="-238">num_requests == 0</label>
			<label kind="synchronisation" x="-773" y="-221">core_response!</label>
			<nail x="-790" y="-204"/>
			<nail x="-790" y="-442"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="guard" x="-603" y="-322">num_requests == NUM_CACHES</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="-586" y="-221">num_requests &gt; 0</label>
			<nail x="-433" y="-204"/>
			<nail x="-433" y="-280"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-603" y="-425">core_request?</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id40"/>
			<label kind="guard" x="-518" y="-390">num_requests &lt; NUM_CACHES</label>
			<label kind="synchronisation" x="-518" y="-373">cache_request!</label>
			<label kind="assignment" x="-518" y="-356">num_requests++</label>
			<nail x="-527" y="-331"/>
			<nail x="-527" y="-399"/>
		</transition>
	</template>
	<system>/** Direct mapped cache and two-way set associative cache comparison system
 *
 * COPYRIGHT (C) 2018 Z0996690
 */

// Address bus
bool addr[ADDR_WIDTH];
bool type;

// Line identifiers
const int NUM_LINES = 2;
const bool LINE_ID[NUM_LINES][MAX_LINE_WIDTH] = {{0}, {1}};

// Core and cache responses are separated to allow intermediate
// coordinator process
chan core_request;
chan core_response;

chan cache_request;
chan cache_response;

// Two caches, so each channel is duplicated so the caches can
// act independently.
const int NUM_CACHES = 2;
const int DMC = 0; // Direct mapped.
const int FAC = 1; // Fully associative.

broadcast chan cache_hit[NUM_CACHES];
broadcast chan cache_miss[NUM_CACHES];

broadcast chan line_status[NUM_CACHES];
broadcast chan line_hit[NUM_CACHES];
broadcast chan line_miss[NUM_CACHES];
broadcast chan line_invalid[NUM_CACHES];

chan line_read[NUM_CACHES];
chan line_write[NUM_CACHES];
chan line_rewrite[NUM_CACHES];
chan line_overwrite[NUM_CACHES];
chan line_done[NUM_CACHES];

// Memory channels are also duplicated as each cache
// needs it's own independent memory.
chan mem_request[NUM_CACHES];
chan mem_response[NUM_CACHES];

// Parameterised cache processes allow associativity
// and number of lines to be specified.
CacheLines(const int cache, const int line, const int num_lines, const int num_sets) = CacheLine(
    CEIL_LOG2[num_lines/num_sets],
    LINE_ID[line],
    addr,
    mem_request[cache],
    mem_response[cache],
    line_status[cache],
    line_hit[cache],
    line_miss[cache],
    line_invalid[cache],
    line_read[cache],
    line_write[cache],
    line_rewrite[cache],
    line_overwrite[cache],
    line_done[cache]
);
CacheController(const int cache) = Controller(
    type,
    cache_request,
    cache_response,
    mem_request[cache],
    mem_response[cache],
    line_status[cache],
    line_hit[cache],
    line_miss[cache],
    line_invalid[cache],
    line_read[cache],
    line_write[cache],
    line_rewrite[cache],
    line_overwrite[cache],
    line_done[cache],
    cache_hit[cache],
    cache_miss[cache]
);
CacheCounter(const int cache) = Counter(
    3, // Only count the first 3 read requests which is minimum for sac achieve more hits than dmc
    cache_hit[cache],
    cache_miss[cache]
);
CacheMemory(const int cache) = Memory(
    mem_request[cache],
    mem_response[cache]
);

// Core process and the intermediate coordinator
core = Core(addr, type, core_request, core_response);
coord = Coordinator(NUM_CACHES, core_request, core_response, cache_request, cache_response);

// Direct mapped cache, two lines, one-way set associativity
dmc_controller = CacheController(DMC);
dmc_lines(const int[0,NUM_LINES-1] line) = CacheLines(DMC, line, NUM_LINES, 1);
dmc_memory = CacheMemory(DMC);
dmc_counter = CacheCounter(DMC);

// Fully associative cache, two lines, two-way set associativity
fac_controller = CacheController(FAC);
fac_lines(const int[0,NUM_LINES-1] line) = CacheLines(FAC, line, NUM_LINES, NUM_LINES);
fac_memory = CacheMemory(FAC);
fac_counter = CacheCounter(FAC);

system core, coord,
    dmc_controller, dmc_lines, dmc_memory, dmc_counter,
    fac_controller, fac_lines, fac_memory, fac_counter;</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>Tests for deadlock. Needs 64-bit Uppaal to complete.
Verification/kernel/elapsed time used: 2643.25s / 6.24s / 2650.049s.
Resident/virtual memory usage peaks: 4,113,652KB / 4,148,004KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &lt;= 30
			</formula>
			<comment>Test tighter upper bound for response time. Should not pass.
Verification/kernel/elapsed time used: 0.23s / 0.4s / 0.644s.
Resident/virtual memory usage peaks: 5,952KB / 25,456KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &lt;= 25
			</formula>
			<comment>Test tighter lower bound for response time. Should not pass.
Verification/kernel/elapsed time used: 0.05s / 0.04s / 0.097s.
Resident/virtual memory usage peaks: 6,404KB / 25,968KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &lt;= 60
			</formula>
			<comment>Does not verify. Runs out of memory.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &gt;= 5
			</formula>
			<comment>Does not verify. Runs out of memory.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (fac_counter.num_requests() == dmc_counter.num_requests()) and (fac_counter.num_hits &gt; dmc_counter.num_hits)
			</formula>
			<comment>Tests if there exists a sequence of requests where the two-way set associative cache outperforms the direct mapped cache.
Verification/kernel/elapsed time used: 41.59s / 0.74s / 42.389s.
Resident/virtual memory usage peaks: 132,588KB / 145,664KB.
			</comment>
		</query>
	</queries>
</nta>
