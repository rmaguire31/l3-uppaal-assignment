<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/** Global declarations
 *
 * COPYRIGHT (c) 2018 Russell Maguire
 */

// Bus specification.
const int ADDR_WIDTH = 4;
const int MAX_LINE_WIDTH = 1;

const bool READ = true;
const bool WRITE = false;

/* Look up table for the function ceil(log2(x)) : int x in (0, 16] */
const int CEIL_LOG2[17] = {
     0, // Should be -inf
        0, 1, 2,
     2, 3, 3, 3,
     3, 4, 4, 4,
     4, 4, 4, 4,
     4
};</declaration>
	<template>
		<name x="5" y="5">Core</name>
		<parameter>bool &amp;addr[ADDR_WIDTH], bool &amp;type, broadcast chan &amp;request, urgent chan &amp;response</parameter>
		<declaration>clock t;</declaration>
		<location id="id0" x="-1037" y="-569">
			<name x="-1021" y="-578">END</name>
			<committed/>
		</location>
		<location id="id1" x="-1037" y="-705">
			<name x="-1021" y="-713">START</name>
			<committed/>
		</location>
		<location id="id2" x="-1037" y="-637">
			<name x="-1020" y="-646">WAITING</name>
		</location>
		<location id="id3" x="-1037" y="-833">
			<name x="-1020" y="-842">IDLE</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="select" x="-1028" y="-816">rand_addr0 : int[0,1],
rand_addr1 : int[0,1],
rand_addr2 : int[0,1],
rand_addr3 : int[0,1],
rand_type : int[0,1]</label>
			<label kind="assignment" x="-867" y="-816">addr[0] = rand_addr0,
addr[1] = rand_addr1,
addr[2] = rand_addr2,
addr[3] = rand_addr3,
type = rand_type</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<nail x="-1105" y="-569"/>
			<nail x="-1105" y="-833"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1028" y="-688">request!</label>
			<label kind="assignment" x="-1028" y="-671">t = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1028" y="-620">response?</label>
		</transition>
	</template>
	<template>
		<name>Memory</name>
		<parameter>urgent chan &amp;request, chan &amp;response</parameter>
		<declaration>const int TMIN = 25;
const int TMAX = 30;

clock t;</declaration>
		<location id="id4" x="-289" y="-374">
			<name x="-273" y="-390">ACCESSING</name>
			<label kind="invariant" x="-273" y="-374">t &lt;= TMAX</label>
		</location>
		<location id="id5" x="-289" y="-450">
			<name x="-273" y="-458">IDLE</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-280" y="-433">request?</label>
			<label kind="assignment" x="-280" y="-418">t = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-468" y="-416">t &gt;= TMIN</label>
			<label kind="synchronisation" x="-468" y="-432">response!</label>
			<nail x="-477" y="-373"/>
			<nail x="-477" y="-449"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>bool &amp;type, urgent chan &amp;req, chan &amp;done, chan &amp;mem_req, urgent chan &amp;mem_done, broadcast chan &amp;status, urgent chan &amp;hit, urgent chan &amp;miss, urgent chan &amp;invalid, chan &amp;read, chan &amp;write, chan &amp;rewrite, chan &amp;overwrite, urgent chan &amp;line_done, broadcast chan &amp;cache_hit, broadcast chan &amp;cache_miss</parameter>
		<declaration>clock t;</declaration>
		<location id="id6" x="-1071" y="-782">
			<committed/>
		</location>
		<location id="id7" x="-1224" y="-782">
			<name x="-1207" y="-790">WRITE_MISS</name>
			<committed/>
		</location>
		<location id="id8" x="-1504" y="-842">
			<name x="-1487" y="-850">READ_MISS</name>
			<committed/>
		</location>
		<location id="id9" x="-1649" y="-901">
			<name x="-1632" y="-850">READ_HIT</name>
			<committed/>
		</location>
		<location id="id10" x="-1368" y="-604">
			<name x="-1377" y="-587">END</name>
			<committed/>
		</location>
		<location id="id11" x="-1368" y="-722">
			<committed/>
		</location>
		<location id="id12" x="-1223" y="-722">
			<name x="-1207" y="-731">CHECK_INVALID</name>
			<urgent/>
		</location>
		<location id="id13" x="-1071" y="-841">
			<committed/>
		</location>
		<location id="id14" x="-1224" y="-841">
			<name x="-1334" y="-849">CHECK_HITW</name>
			<urgent/>
		</location>
		<location id="id15" x="-1504" y="-781">
			<name x="-1513" y="-765">READING_MEM</name>
		</location>
		<location id="id16" x="-1649" y="-841">
			<committed/>
		</location>
		<location id="id17" x="-1368" y="-663">
			<name x="-1462" y="-655">ACCESSING</name>
		</location>
		<location id="id18" x="-1504" y="-900">
			<name x="-1487" y="-909">CHECK_HITR</name>
			<urgent/>
		</location>
		<location id="id19" x="-1224" y="-960">
			<name x="-1208" y="-969">WRITE_START</name>
			<committed/>
		</location>
		<location id="id20" x="-1504" y="-960">
			<name x="-1487" y="-969">READ_START</name>
			<committed/>
		</location>
		<location id="id21" x="-1368" y="-994">
			<name x="-1377" y="-977">START</name>
			<committed/>
		</location>
		<location id="id22" x="-1368" y="-1071">
			<name x="-1378" y="-1105">IDLE</name>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id13"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1063" y="-824">cache_hit!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-1215" y="-824">cache_miss!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1496" y="-884">cache_miss!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-1640" y="-884">cache_hit!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-1486" y="-798">mem_done?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-1215" y="-764">status!</label>
			<nail x="-1224" y="-765"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-1350" y="-621">done!</label>
			<nail x="-909" y="-603"/>
			<nail x="-909" y="-1071"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1360" y="-646">line_done?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1063" y="-731">rewrite!</label>
			<nail x="-1071" y="-663"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1215" y="-705">overwrite!</label>
			<nail x="-1224" y="-663"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1360" y="-705">write!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1342" y="-748">invalid?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-1207" y="-858">hit?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1215" y="-884">status!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-1496" y="-824">mem_req!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1641" y="-698">read!</label>
			<nail x="-1649" y="-663"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1623" y="-918">hit?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-1496" y="-943">status!</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="guard" x="-1351" y="-1020">type == WRITE</label>
			<nail x="-1223" y="-994"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-1487" y="-1020">type == READ</label>
			<nail x="-1504" y="-994"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1360" y="-1054">req?</label>
			<label kind="assignment" x="-1360" y="-1037">t = 0</label>
		</transition>
	</template>
	<template>
		<name>CacheLine</name>
		<parameter>const int[0,MAX_LINE_WIDTH] LINE_WIDTH, const bool line[MAX_LINE_WIDTH], bool &amp;addr[ADDR_WIDTH], chan &amp;mem_req, urgent chan &amp;mem_res, urgent chan &amp;status, broadcast chan &amp;hit, broadcast chan &amp;miss, broadcast chan &amp;invalid, urgent chan &amp;read, urgent chan &amp;write, urgent chan &amp;rewrite, urgent chan &amp;overwrite, chan &amp;done</parameter>
		<declaration>/* Timing bounds */
const int TMINR = 5;
const int TMAXR = 10;
const int TMINW = 25;
const int TMAXW = 30;

/* Address breakdown */
const int TAG_WIDTH = ADDR_WIDTH - LINE_WIDTH;
const int LINE_OFFSET = 0;
const int TAG_OFFSET = LINE_OFFSET + LINE_WIDTH;

/* State */
bool tag[TAG_WIDTH];
bool valid = false;

/* Local clock for timed cache accesses */
clock t;

bool is_cache_line()
{
    return forall (i : int[0,LINE_WIDTH-1]) addr[i+LINE_OFFSET] == line[i];
}

bool is_cache_valid()
{
    return valid;
}

bool is_cache_hit()
{
    return forall (i : int[0,TAG_WIDTH-1]) addr[i+TAG_OFFSET] == tag[i];
}

void update_cache()
{
    for (i : int[0,TAG_WIDTH-1]) tag[i] = addr[i+TAG_OFFSET];
    valid = true;
}</declaration>
		<location id="id23" x="-705" y="-782">
			<name x="-722" y="-765">END</name>
			<committed/>
		</location>
		<location id="id24" x="-705" y="-858">
			<name x="-688" y="-867">WAITING</name>
		</location>
		<location id="id25" x="-705" y="-926">
			<name x="-688" y="-943">WRITING</name>
			<label kind="invariant" x="-688" y="-926">t &lt;= TMAXW</label>
		</location>
		<location id="id26" x="-527" y="-926">
			<name x="-510" y="-943">READING</name>
			<label kind="invariant" x="-510" y="-926">t &lt;= TMAXR</label>
		</location>
		<location id="id27" x="-705" y="-1003">
			<committed/>
		</location>
		<location id="id28" x="-1062" y="-1105">
			<name x="-1045" y="-1122">IDLE</name>
		</location>
		<location id="id29" x="-909" y="-1309">
			<name x="-951" y="-1293">CHECK_LINE</name>
			<committed/>
		</location>
		<location id="id30" x="-748" y="-1249">
			<name x="-799" y="-1231">CHECK_VALID</name>
			<committed/>
		</location>
		<location id="id31" x="-884" y="-1088">
			<name x="-867" y="-1106">INVALID</name>
		</location>
		<location id="id32" x="-620" y="-1190">
			<name x="-662" y="-1173">CHECK_HIT</name>
			<committed/>
		</location>
		<location id="id33" x="-527" y="-1054">
			<name x="-510" y="-1062">HIT</name>
		</location>
		<location id="id34" x="-705" y="-1071">
			<name x="-688" y="-1088">MISS</name>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-680" y="-1071">status?</label>
			<nail x="-1258" y="-1054"/>
			<nail x="-1258" y="-1394"/>
			<nail x="-909" y="-1394"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-858" y="-1088">status?</label>
			<nail x="-1249" y="-1071"/>
			<nail x="-1249" y="-1385"/>
			<nail x="-917" y="-1385"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-1037" y="-1105">status?</label>
			<nail x="-1241" y="-1088"/>
			<nail x="-1241" y="-1377"/>
			<nail x="-926" y="-1377"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-1215" y="-1122">status?</label>
			<nail x="-1232" y="-1105"/>
			<nail x="-1232" y="-1368"/>
			<nail x="-934" y="-1368"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-1045" y="-799">done!</label>
			<nail x="-1062" y="-782"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id23"/>
			<label kind="guard" x="-518" y="-902">t &gt;= TMINR</label>
			<nail x="-527" y="-782"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-697" y="-841">mem_res?</label>
			<label kind="assignment" x="-697" y="-824">update_cache()</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-696" y="-901">t &gt;= TMINW</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-696" y="-986">mem_req!</label>
			<label kind="assignment" x="-696" y="-969">t = 0</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-518" y="-986">read?</label>
			<label kind="assignment" x="-518" y="-969">t = 0</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-697" y="-1045">overwrite?</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-670" y="-1021">rewrite?</label>
			<nail x="-527" y="-1003"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-875" y="-1020">write?</label>
			<nail x="-884" y="-1003"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-1054" y="-1334">!is_cache_line()</label>
			<nail x="-1062" y="-1309"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-884" y="-1334">is_cache_line()</label>
			<nail x="-748" y="-1309"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="guard" x="-884" y="-1275">!is_cache_valid()</label>
			<label kind="synchronisation" x="-875" y="-1147">invalid!</label>
			<nail x="-884" y="-1249"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id32"/>
			<label kind="guard" x="-731" y="-1275">is_cache_valid()</label>
			<nail x="-620" y="-1249"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id34"/>
			<label kind="guard" x="-731" y="-1213">!is_cache_hit()</label>
			<label kind="synchronisation" x="-697" y="-1147">miss!</label>
			<nail x="-705" y="-1190"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="guard" x="-587" y="-1213">is_cache_hit()</label>
			<label kind="synchronisation" x="-519" y="-1147">hit!</label>
			<nail x="-527" y="-1190"/>
		</transition>
	</template>
	<template>
		<name>Counter</name>
		<parameter>const int MAX_REQUESTS, bool &amp;addr[ADDR_WIDTH],  urgent chan &amp;hit, urgent chan &amp;miss</parameter>
		<declaration>int[0,MAX_REQUESTS] num_misses = 0;
int[0,MAX_REQUESTS] num_hits = 0;

int num_requests()
{
    return num_misses + num_hits;
}

bool hit_rate_ge(const int test)
{
    return num_requests() &gt; 0
        &amp;&amp; 100*num_hits &gt;= test*num_requests();
}</declaration>
		<location id="id35" x="-671" y="-178">
			<name x="-654" y="-187">END</name>
		</location>
		<location id="id36" x="-671" y="-246">
			<committed/>
		</location>
		<location id="id37" x="-671" y="-357">
			<name x="-680" y="-391">IDLE</name>
		</location>
		<init ref="id37"/>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-663" y="-221">num_requests() == MAX_REQUESTS</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="guard" x="-663" y="-280">num_requests() &lt; MAX_REQUESTS</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-884" y="-340">miss?</label>
			<label kind="assignment" x="-884" y="-323">num_misses++</label>
			<nail x="-739" y="-357"/>
			<nail x="-739" y="-246"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-595" y="-340">hit?</label>
			<label kind="assignment" x="-595" y="-323">num_hits++</label>
			<nail x="-603" y="-357"/>
			<nail x="-603" y="-246"/>
		</transition>
	</template>
	<system>/** Main memory system
 * COPYRIGHT (c) 2018 Russell Maguire
 */

/* Address bus */
bool addr[ADDR_WIDTH];
bool type;

/* Line identifiers */
const int NUM_LINES = 2;
const bool LINE_ID[NUM_LINES][MAX_LINE_WIDTH] = {{0}, {1}};

/* Separate core  */
chan core_request;
chan core_response;

/* Cache channels */

broadcast chan cache_hit;
broadcast chan cache_miss;

broadcast chan line_status;
broadcast chan line_hit;
broadcast chan line_miss;
broadcast chan line_invalid;

chan line_read;
chan line_write;
chan line_rewrite;
chan line_overwrite;
chan line_done;

/* Memory channels */
chan mem_request;
chan mem_response;

/* Parameterised cache line process */
CacheLines(const int line, const int num_lines, const int num_sets) = CacheLine(
    CEIL_LOG2[num_lines/num_sets],
    LINE_ID[line],
    addr,
    mem_request,
    mem_response,
    line_status,
    line_hit,
    line_miss,
    line_invalid,
    line_read,
    line_write,
    line_rewrite,
    line_overwrite,
    line_done
); 

/* Core and memory processes */
core = Core(addr, type, core_request, core_response);
memory = Memory(mem_request, mem_response);

/* Direct mapped cache, two lines, one-way set associativity */
dm_controller = Controller(
    type,
    core_request,
    core_response,
    mem_request,
    mem_response,
    line_status,
    line_hit,
    line_miss,
    line_invalid,
    line_read,
    line_write,
    line_rewrite,
    line_overwrite,
    line_done,
    cache_hit,
    cache_miss
);
dm_lines(const int[0,NUM_LINES-1] line) = CacheLines(line, NUM_LINES, 1);
dm_counter = Counter(
    10, // Only count the first 10 requests. The minimum to verify 90% hit rate.
    addr,
    cache_hit,
    cache_miss
);

system core, memory, dm_controller, dm_lines, dm_counter;</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>Tests whether the state deadlocks.
Verification/kernel/elapsed time used: 14.1s / 0.63s / 14.749s.
Resident/virtual memory usage peaks: 259,344KB / 261,296KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &lt;= 30
			</formula>
			<comment>Tests tight upper bound for response time. Should not pass.
Verification/kernel/elapsed time used: 0.59s / 0.03s / 0.607s.
Resident/virtual memory usage peaks: 259,344KB / 261,296KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &lt;= 25
			</formula>
			<comment>Tests tight lower bound for response time. Should not pass.
Verification/kernel/elapsed time used: 0.03s / 0.01s / 0.041s.
Resident/virtual memory usage peaks: 259,344KB / 261,296KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &lt;= 60
			</formula>
			<comment>Tests relaxed upper bound for response time.
Verification/kernel/elapsed time used: 24.77s / 0.68s / 25.47s.
Resident/virtual memory usage peaks: 277,696KB / 279,696KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &gt;= 5
			</formula>
			<comment>Tests relaxed upper bound for response time.
Verification/kernel/elapsed time used: 24.91s / 0.6s / 25.534s.
Resident/virtual memory usage peaks: 277,696KB / 279,696KB.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; dm_counter.hit_rate_ge(90)
			</formula>
			<comment>Tests whether there exists a sequence of requests with a hit rate greater than or equal to 90%.
Satisfied by ten requests of to the same address, eg. [0,0,0,0].
Verification/kernel/elapsed time used: 5.45s / 0.64s / 6.09s.
Resident/virtual memory usage peaks: 276,720KB / 278,760KB.
			</comment>
		</query>
	</queries>
</nta>
