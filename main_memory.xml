<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>/** Global declarations
 *
 * COPYRIGHT (c) 2018 Russell Maguire
 */

// Constants.
const int ADDR_WIDTH = 4;
const int ADDR_MAX = (1 &lt;&lt; ADDR_WIDTH) - 1;

// Global clock.
clock time;</declaration><template><name x="5" y="5">Core</name><parameter>int[0,ADDR_MAX] &amp;addr, chan &amp;read, chan &amp;write, urgent chan &amp;done</parameter><declaration>/** Core process template
 *
 * DESCRIPTION
 *    Template for process which generates randomly generates read and write requests
 *
 * INPUTS
 *    addr  - address bus
 *    read  - channel signaling read request
 *    write - channel signaling write request
 *    done  - channel signaling completed request
 *
 * COPYRIGHT (c) 2018 Russell Maguire
 */

clock t;</declaration><location id="id0" x="-1000" y="-160"><name x="-1112" y="-168">ACCESS_END</name><committed/></location><location id="id1" x="-696" y="-160"><name x="-680" y="-168">ACCESS_START</name><committed/></location><location id="id2" x="-856" y="-160"><name x="-840" y="-168">WAITING</name></location><location id="id3" x="-1000" y="-24"><name x="-1048" y="-32">IDLE</name></location><init ref="id3"/><transition><source ref="id0"/><target ref="id3"/></transition><transition><source ref="id1"/><target ref="id2"/><label kind="synchronisation" x="-800" y="-120">write!</label><nail x="-776" y="-80"/></transition><transition><source ref="id1"/><target ref="id2"/><label kind="synchronisation" x="-800" y="-216">read!</label><nail x="-776" y="-240"/></transition><transition><source ref="id3"/><target ref="id1"/><label kind="select" x="-688" y="-104">rand : int[0,ADDR_MAX]</label><label kind="assignment" x="-688" y="-88">addr = rand, t = 0</label><nail x="-696" y="-24"/></transition><transition><source ref="id2"/><target ref="id0"/><label kind="synchronisation" x="-944" y="-176">done?</label></transition></template><template><name>MemController</name><parameter>urgent chan &amp;access, chan &amp;done</parameter><declaration>// MemController declarations
// COPYRIGHT (c) 2018 Russell Maguire

const int TMIN = 25;
const int TMAX = 30;

clock t;</declaration><location id="id4" x="72" y="-144"><name x="88" y="-160">ACCESSING</name><label kind="invariant" x="88" y="-144">t &lt;= TMAX</label></location><location id="id5" x="-72" y="0"><name x="-120" y="-8">IDLE</name></location><init ref="id5"/><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="80" y="-80">access?</label><label kind="assignment" x="80" y="-65">t = 0</label><nail x="72" y="0"/></transition><transition><source ref="id4"/><target ref="id5"/><label kind="guard" x="-64" y="-160">t &gt;= TMIN</label><label kind="synchronisation" x="-64" y="-176">done!</label><nail x="-72" y="-144"/></transition></template><system>/** Direct-mapped cache system
 * COPYRIGHT (c) 2018 Russell Maguire
 */

// Address bus.
int[0,ADDR_MAX] addr = 0;

// Channels
chan access;
chan done;

// System processes
// core.read and core.write both use the same generic memory access channel
core = Core(addr, access, access, done);
mem_controller = MemController(access, done);

system core, mem_controller;</system></nta>