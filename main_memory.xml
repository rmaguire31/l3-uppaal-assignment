<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/** Global constants
 *
 * COPYRIGHT (C) 2018 Z0996690
 */

// Bus specification
// These are used in parameter declarations so need to be global.
const int ADDR_WIDTH = 4;
const int MAX_LINE_WIDTH = 1;

const bool READ = true;
const bool WRITE = false;</declaration>
	<template>
		<name x="5" y="5">Core</name>
		<parameter>bool &amp;addr[ADDR_WIDTH], bool &amp;type, broadcast chan &amp;request, urgent chan &amp;response</parameter>
		<declaration>/** Core process template
 *
 * DESCRIPTION
 *  This template is used to create processes which
 *  non-deterministically make a sequence of access
 *  requests and time their responses.
 *
 *  The process can wait in the IDLE state for an
 *  indefinite time before non-deterministically
 *  selecting the address to access and the access
 *  type, which can be read or write.
 *
 * ARGUMENTS
 *      addr : Reference to a shared array of bits
 *             which is the address bus. This avoids
 *             the address bus being in the global
 *             scope.
 *      type : Reference to a shared flag which is
 *             the type of access request. This can
 *             be READ (true|1) or WRITE (false|0).
 *   request : Reference to shared channel which the
 *             core uses to issue requests after
 *             selecting the address and access type.
 *             Channel parameter allows templates to
 *             be reused.
 *  response : Reference to shared channel which the
 *             core listens to before considering the
 *             request fulfilled. This channel is
 *             qualified as urgent, to prevent the
 *             process blocking after another process
 *             signals a response. Channel parameter
 *             allows templates to be reused.
 */

// Local clock used to time responses
clock t;</declaration>
		<location id="id0" x="-1037" y="-569">
			<name x="-1021" y="-578">END</name>
			<committed/>
		</location>
		<location id="id1" x="-1037" y="-705">
			<name x="-1021" y="-713">START</name>
			<committed/>
		</location>
		<location id="id2" x="-1037" y="-637">
			<name x="-1020" y="-646">WAITING</name>
		</location>
		<location id="id3" x="-1037" y="-833">
			<name x="-1020" y="-842">IDLE</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="select" x="-1028" y="-816">rand_addr0 : int[0,1],
rand_addr1 : int[0,1],
rand_addr2 : int[0,1],
rand_addr3 : int[0,1],
rand_type : int[0,1]</label>
			<label kind="assignment" x="-867" y="-816">addr[0] = rand_addr0,
addr[1] = rand_addr1,
addr[2] = rand_addr2,
addr[3] = rand_addr3,
type = rand_type</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<nail x="-1105" y="-569"/>
			<nail x="-1105" y="-833"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1028" y="-688">request!</label>
			<label kind="assignment" x="-1028" y="-671">t = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1028" y="-620">response?</label>
		</transition>
	</template>
	<template>
		<name>Memory</name>
		<parameter>urgent chan &amp;request, chan &amp;response</parameter>
		<declaration>/** Memory process template
 *
 * DESCRIPTION
 *  This template is used to simulate the delay
 *  associated with main memory accesses and the
 *  variability which can occur in them.
 *
 *  The process can wait in the IDLE state for an
 *  indefinite time until a request is received.
 *  The invariant and guard ensures 25 to 30 ns of
 *  time passes before the response is sent.
 *
 * ARGUMENTS
 *   request : Reference to shared channel which the
 *             memory listens to before timed 'ACCESSING'.
 *             This channel is qualified as urgent, to
 *             prevent the process blocking after another
 *             process signals a request for access.
 *             Channel parameter allows templates to be
 *             reused.
 *  response : Reference to shared channel which the
 *             memory uses to indicate the end of the
 *             timed access. Channel parameter allows
 *             templates to be reused.
 */

// Local clock used to enforce access time.
clock t;

// Timing bounds used in guard and invariant.
const int TMIN = 25; // ns
const int TMAX = 30; // ns</declaration>
		<location id="id4" x="-289" y="-374">
			<name x="-273" y="-390">ACCESSING</name>
			<label kind="invariant" x="-273" y="-374">t &lt;= TMAX</label>
		</location>
		<location id="id5" x="-289" y="-450">
			<name x="-273" y="-458">IDLE</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-280" y="-433">request?</label>
			<label kind="assignment" x="-280" y="-418">t = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-468" y="-416">t &gt;= TMIN</label>
			<label kind="synchronisation" x="-468" y="-432">response!</label>
			<nail x="-477" y="-373"/>
			<nail x="-477" y="-449"/>
		</transition>
	</template>
	<system>/** Simple main memory system
 * COPYRIGHT (c) 2018 Z0996690
 */

// Address bus
bool addr[ADDR_WIDTH];
bool type;

// Channels
chan request;
chan response;

// Core and memory processes
core = Core(addr, type, request, response);
memory = Memory(request, response);

system core, memory;</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>Tests for deadlock.
Verification/kernel/elapsed time used: 0.01s / 0s / 0.022s.
Resident/virtual memory usage peaks: 4,784KB / 24,304KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &lt;= 30
			</formula>
			<comment>Tests upper bound for request response time.
Verification/kernel/elapsed time used: 0s / 0.02s / 0.019s.
Resident/virtual memory usage peaks: 5,332KB / 24,852KB.
			</comment>
		</query>
		<query>
			<formula>core.START --&gt; core.END and core.t &gt;= 25
			</formula>
			<comment>Tests lower bound for request response time.
Verification/kernel/elapsed time used: 0s / 0.02s / 0.019s.
Resident/virtual memory usage peaks: 5,332KB / 24,852KB.
			</comment>
		</query>
	</queries>
</nta>
